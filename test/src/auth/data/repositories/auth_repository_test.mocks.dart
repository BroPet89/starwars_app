// Mocks generated by Mockito 5.3.2 from annotations
// in starwars_app/test/src/auth/data/repositories/auth_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:starwars_app/features/auth/data/datasources/auth_local_data_source.dart'
    as _i9;
import 'package:starwars_app/features/auth/data/datasources/auth_remote_data_source.dart'
    as _i8;
import 'package:starwars_app/features/auth/data/repositories/auth_repository.dart'
    as _i4;
import 'package:starwars_app/src/domain/models/auth/auth_success.dart' as _i7;
import 'package:starwars_app/src/domain/models/failure.dart' as _i6;
import 'package:starwars_app/src/domain/models/user_credentials.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredentials_1 extends _i1.SmartFake
    implements _i3.UserCredentials {
  _FakeUserCredentials_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i4.AuthRepository {
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.AuthSuccess>> signIn() =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.AuthSuccess>>.value(
            _FakeEither_0<_i6.Failure, _i7.AuthSuccess>(
          this,
          Invocation.method(
            #signIn,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i7.AuthSuccess>>.value(
                _FakeEither_0<_i6.Failure, _i7.AuthSuccess>(
          this,
          Invocation.method(
            #signIn,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.AuthSuccess>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> signOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i6.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i6.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>);
  @override
  _i5.Future<bool> isRegistrationComplete() => (super.noSuchMethod(
        Invocation.method(
          #isRegistrationComplete,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i8.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.UserCredentials> googleSignIn() => (super.noSuchMethod(
        Invocation.method(
          #googleSignIn,
          [],
        ),
        returnValue:
            _i5.Future<_i3.UserCredentials>.value(_FakeUserCredentials_1(
          this,
          Invocation.method(
            #googleSignIn,
            [],
          ),
        )),
      ) as _i5.Future<_i3.UserCredentials>);
  @override
  _i5.Future<dynamic> googleSignOut() => (super.noSuchMethod(
        Invocation.method(
          #googleSignOut,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<bool> isRegistrationComplete() => (super.noSuchMethod(
        Invocation.method(
          #isRegistrationComplete,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [AuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDataSource extends _i1.Mock
    implements _i9.AuthLocalDataSource {
  MockAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<dynamic> storeUserCredentials(
          _i3.UserCredentials? userCredentials) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeUserCredentials,
          [userCredentials],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<_i3.UserCredentials> getUserCredentials() => (super.noSuchMethod(
        Invocation.method(
          #getUserCredentials,
          [],
        ),
        returnValue:
            _i5.Future<_i3.UserCredentials>.value(_FakeUserCredentials_1(
          this,
          Invocation.method(
            #getUserCredentials,
            [],
          ),
        )),
      ) as _i5.Future<_i3.UserCredentials>);
}
